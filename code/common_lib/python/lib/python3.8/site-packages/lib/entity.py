import json
from collections import namedtuple
from decimal import Decimal
from json import JSONEncoder

from lib.common_consts import AppointmentStatus, AppointmentBookingMethod, DispensaryStuffRoles, DocMetaDataKeys
from lib.doctor_availability_consts import SlotUpdateType


class Patient:

    def __init__(self, *, first_name, last_name, middle_name=None, address=None, mobile_number,
                 pre_conditions=None, date_of_birth=None, profile_photo_url=None, display_name=None, age=None
                 , gender=None, id=None, kiosk=None, **kwargs):
        self.first_name = first_name
        self.last_name = last_name
        self.middle_name = middle_name
        self.address = address
        self.mobile_number = mobile_number
        self.pre_conditions = pre_conditions
        self.date_of_birth = date_of_birth
        self.profile_photo_url = profile_photo_url
        self.display_name = display_name
        self.age = age
        self.gender = gender
        self.id = id

    @staticmethod
    def get_doctor_from_db_object(self, item):
        self.first_name = item['first_name']['S']
        self.last_name = item['last_name']['S']
        self.middle_name = item['middle_name']['S']
        self.address = item['address']['SS']
        self.mobile_number = item['mobile_number']['S']
        self.pre_conditions = item['pre_conditions']['SS']
        self.date_of_birth = item['date_of_birth']['S']
        self.profile_photo_url = item['profile_photo_url']['S']
        self.display_name = item['display_name']['S']
        self.age = item['age']['S']
        self.gender = item['gender']['S']

    @staticmethod
    def json_load(data):
        return Patient(**data)


class Dispensary:

    def __init__(self, *, name, geo_location, address, phone_number, qr_img=None, contact_number=None, br_number=None
                 , service_category=None, card_reader=None, city=None, **kwargs):
        self.name = name
        self.geo_location = json.loads(json.dumps(geo_location), parse_float=Decimal)
        self.address = address
        self.phone_number = phone_number
        self.qr_img = qr_img
        self.contact_number = contact_number
        self.br_number = br_number
        self.service_category = service_category
        self.card_reader = card_reader
        self.city = city

    @staticmethod
    def get_doctor_from_db_object(self, item):
        self.name = item['name']['S']
        self.geo_location = item['geo_location']['M']
        self.address = item['address']['SS']
        self.phone_number = item['phone_number']['S']
        self.qr_img = item['qr_img']['S']
        self.contact_number = item['contact_number']['S']
        self.br_number = item['br_number']['S']
        self.city = item['city']['S']

    @staticmethod
    def json_load(data):
        return Dispensary(**data)


class Doctor:

    def __init__(self, *, mobile_number, initials=None, display_name=None, first_name=None, last_name=None,
                 review=None, rating=None, preferred_doctor=False, active=True, consultation_fee=None,
                 image_url=None, slmc_registratoin_number=None, speciality, verified=None, educations=None, city
                 , availability=True, created_date=None, contact_number=None, payment_method=None, **kwargs):
        self.mobile_number = mobile_number
        self.initials = initials
        self.display_name = display_name
        self.first_name = first_name
        self.last_name = last_name
        self.review = review
        self.rating = rating
        self.preferred_doctor = preferred_doctor
        self.active = active
        self.consultation_fee = consultation_fee
        self.image_url = image_url
        self.slmc_registratoin_number = slmc_registratoin_number
        self.speciality = speciality
        self.verified = verified
        self.educations = educations
        self.city = city
        self.availability = availability
        self.created_date = created_date
        self.contact_number = contact_number
        self.payment_method = payment_method

    @staticmethod
    def get_doctor_from_db_object(self, item):
        self.mobile_number = item['mobile_number']['S']
        self.initials = item['initials']['S']
        self.display_name = item['display_name']['S']
        self.first_name = item['first_name']['S']
        self.last_name = item['last_name']['S']
        self.review = item['review']['N']
        self.rating = item['rating']['N']
        self.preferred_doctor = item['preferred_doctor']['BOOL']
        self.active = item['active']['BOOL']
        self.consultation_fee = item['consultation_fee']['N']
        self.image_url = item['image_url']['S']
        self.slmc_registratoin_number = item['slmc_registratoin_number']['S']
        self.speciality = item['speciality']['S']
        self.verified = item['verified']['BOOL']
        self.educations = item['educations']['SS']
        self.city = item['city']['S']
        self.availability = item['availability']['BOOL']
        self.created_date = item['created_date']['S']
        self.contact_number = item['contact_number']['S']

    @staticmethod
    def json_load(data):
        return Doctor(**data)


class DoctorAvailability:

    def __init__(self, *, availabilities, **kwargs):
        # availabilities = [
        #     {
        #         "available": True,
        #         "date": "2020-07-08",
        #         "from": "2020-07-08 08:00:00",
        #         "to": "2020-07-08 18:00:00"
        #     }
        # ]
        self.availabilities = availabilities

    @staticmethod
    def get_doctor_from_db_object(self, item):
        self.availabilities = item['availabilities']['M']

    @staticmethod
    def json_load(data):
        return DoctorAvailability(**data)


class TimeSlot:

    def __init__(self, item):
        self.slot_number = item['item_number']['S']
        self.available = item['available']['BOOL']
        self.start_time = item['start_time']['N']
        self.current = item['current']['B']


class Session:

    def __init__(self, *, session_id, start_time, pause=False, **kwargs):
        self.session_id = session_id
        self.start_time = start_time
        self.pause = pause

    @staticmethod
    def json_load(data):
        return Session(**data)


class Review:

    def __init__(self, item):
        self.comment = item['comment']['S']


class Photo:

    def __init__(self, item):
        self.s3_url = item['s3_url']['S']


class DispensaryDoctor:

    def __init__(self, *, doctor, dispensary, slots
                 , availability_start_date=None
                 , availability_end_date=None
                 , start_time=None
                 , end_time=None
                 , slot_duration=DocMetaDataKeys.slot_duration
                 , validity_period=DocMetaDataKeys.validity_period
                 , availability_groups=None
                 , availability_end_dates_map=None
                 , **kwargs):
        self.doctor = doctor
        self.dispensary = dispensary
        self.slots = json.loads(json.dumps(slots), parse_float=Decimal)
        self.availability_start_date = availability_start_date
        self.availability_end_date = availability_end_date
        self.start_time = start_time
        self.end_time = end_time
        self.slot_duration = slot_duration
        self.validity_period = validity_period

        if availability_groups is None:
            availability_groups = []
        self.availability_groups = availability_groups
        self.availability_end_dates_map = availability_end_dates_map

    @staticmethod
    def get_doctor_from_db_object(self, item):
        self.doctor = item['doctor']['S']
        self.dispensary = item['dispensary']['S']
        self.slots = item['slots']['M']
        self.availability_start_date = item['availability_start_date']['S']
        self.availability_end_date = item['availability_end_date']['S']
        self.start_time = item['start_time']['S']
        self.end_time = item['end_time']['S']
        self.slot_duration = item['slot_duration']['S']
        self.validity_period = item['validity_period']['S']

    @staticmethod
    def json_load(data):
        return DispensaryDoctor(**data)


class DispensaryStuff:

    def __init__(self, *, dispensary_id, staff_id, role=DispensaryStuffRoles.STAFF, **kwargs):
        self.dispensary_id = dispensary_id
        self.staff_id = staff_id
        self.role = role

    @staticmethod
    def json_load(data):
        return DispensaryStuff(**data)


class Appointment:

    def __init__(self, *, doctor_id, dispensary_id, slot_id: int, date, day, symptom: str = None, current: bool = False,
                 completed: bool = False
                 , doctor_recommendation: str = None, family_member=None, doctor_fee=None, booking_fee=None,
                 ezdoc_discount=None, cancel=False
                 , checked_in=False, checked_in_at='', reason=None, status: int = AppointmentStatus.NOT_AVAILABLE
                 , treated_at=None, booking_at=None, booking_method=AppointmentBookingMethod.ONLINE, slot_time=None,
                 note=None, patient=None, kiosk=False, ghost_session=False, vital_signs=None , **kwargs):
        self.doctor_id = doctor_id
        self.dispensary_id = dispensary_id
        self.slot_id = slot_id
        self.date = date
        self.day = day
        self.symptom = symptom
        self.current = current
        self.completed = completed
        self.doctor_recommendation = doctor_recommendation
        self.family_member = family_member
        self.doctor_fee = doctor_fee
        self.booking_fee = booking_fee
        self.ezdoc_discount = ezdoc_discount
        self.cancel = cancel
        self.checked_in = checked_in
        self.checked_in_at = checked_in_at
        self.treated_at = treated_at
        self.reason = reason
        self.status = status
        self.booking_at = booking_at
        self.booking_method = booking_method
        self.slot_time = slot_time
        self.note = note
        self.patient = patient
        self.kiosk = kiosk
        self.ghost_session = ghost_session
        self.vital_signs = vital_signs

    @staticmethod
    def json_load(data):
        return Appointment(**data)


class PatientFamilyMember:

    def __init__(self, *, first_name, last_name, date_of_birth, gender, profile_pic=None, **kwargs):
        self.first_name = first_name
        self.last_name = last_name
        self.date_of_birth = date_of_birth
        self.gender = gender
        self.profile_pic = profile_pic

    @staticmethod
    def get_family_member_from_db_object(self, item):
        self.first_name = item['first_name']['S']
        self.last_name = item['last_name']['S']
        self.date_of_birth = item['date_of_birth']['S']
        self.gender = item['gender']['S']
        self.profile_pic = item['profile_pic']['S']

    @staticmethod
    def json_load(data):
        return PatientFamilyMember(**data)


class Banner:

    def __init__(self, *, title, text, texts=[], image, action, color, enable=True, **kwargs):
        self.title = title
        self.text = text
        self.texts = texts
        self.image = image
        self.action = action
        self.color = color
        self.enable = enable

    @staticmethod
    def get_banner_from_db_object(self, item):
        self.title = item['title']['S']
        self.text = item['text']['S']
        self.texts = item['texts']['L']
        self.image = item['image']['S']
        self.action = item['action']['M']
        self.color = item['color']['S']
        self.enable = item['enable']['BOOL']

    @staticmethod
    def json_load(data):
        return Banner(**data)


class PreferredDoctor:
    def __init__(self, *, doctor_id, **kwargs):
        self.doctor_id = doctor_id

    @staticmethod
    def json_load(data):
        return PreferredDoctor(**data)


class Review:

    def __init__(self, *, doctor_id, reviews: list = [], **kwargs):
        self.doctor_id = doctor_id
        self.reviews = reviews

    @staticmethod
    def json_load(data):
        return Review(**data)


class Rate:

    def __init__(self, *, doctor_id, rates: list = [], **kwargs):
        self.doctor_id = doctor_id
        self.rates = rates

    @staticmethod
    def json_load(data):
        return Rate(**data)


class TextConfig:

    def __init__(self, *, title, content, **kwargs):
        self.title = title
        self.content = content

    @staticmethod
    def json_load(data):
        return TextConfig(**data)


class OTP:

    def __init__(self, phone_number, otp):
        self.phone_number = phone_number
        self.otp = otp

    @staticmethod
    def get_otp_from_db_object(self, item):
        self.phone_number = item['phone_number']['S']
        self.otp = item['otp']['S']

    @staticmethod
    def json_load(data):
        return OTP(**data)


class DoctorDelay:

    def __init__(self, doctor_id, date, minute):
        self.doctor_id = doctor_id
        self.date = date
        self.hours = minute

    @staticmethod
    def json_load(data):
        return DoctorDelay(**data)


class ContactUs:

    def __init__(self, email, full_name, message):
        self.email = email
        self.full_name = full_name
        self.message = message

    @staticmethod
    def json_load(data):
        return ContactUs(**data)


class DoctorSlotUpdate:

    def __init__(self, *,
                 doctor_id,
                 update_type,
                 date=None,
                 cancel_mode=False,
                 start_time=None,
                 end_time=None,
                 **kwargs):
        self.doctor_id = doctor_id
        self.date = date
        self.cancel_mode = cancel_mode
        self.start_time = start_time
        self.end_time = end_time
        self.update_type = update_type

    @staticmethod
    def json_load(data):
        return DoctorSlotUpdate(**data)


class AppConfig:

    def __init__(self, *, specialities, booking_fee, **kwargs):
        self.specialities = specialities
        self.booking_fee = booking_fee

    @staticmethod
    def json_load(data):
        return AppConfig(**data)
