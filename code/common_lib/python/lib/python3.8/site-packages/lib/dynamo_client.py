import boto3
from boto3.dynamodb.conditions import Key, Attr
import uuid
from lib.common_consts import AppointmentStatus, DispensaryStuffRoles
from lib.common_utils import get_value_by_key, is_empty_str, time_now
from lib.entity import Doctor, Patient, Dispensary, DispensaryDoctor, Appointment, Session, PatientFamilyMember, Banner, \
    PreferredDoctor, Review, Rate, TextConfig, OTP, DoctorAvailability, DoctorDelay, ContactUs, DoctorSlotUpdate
import json
import os
from decimal import Decimal
# from datetime import datetime
# import pytz

PATIENT_PREFIX = 'patient#{}'
DOCTOR_PREFIX = 'doctor#{}'
APPOINTMENT_PREFIX = 'appointment#doctor#{}#date#{}'
APPOINTMENT_SAVE_PREFIX = 'appointment#doctor#{}#date#{}#slot#{}'
DISPENSARY_PREFIX = 'dispensary#{}'
SESSION_PREFIX = 'session#{}'
SLOT_PREFIX = 'slot#'
CITY_PREFIX = "city#{}"
METADATA_PREFIX = "metadata#{}"
PREFERRED_DOC_PREFIX = "preferred_doc#{}"
PATIENT_FAMILY_MEMBER_PREFIX = 'family_member#{}'
BANNER_PREFIX = 'banner#{}'
REVIEW_PREFIX = 'review#{}'
RATE_PREFIX = 'rate#{}'
TEXT_CONFIG_PREFIX = 'text_config#{}'
OTP_PREFIX = 'otp#{}'
DOCTOR_AVAILABILITY_PREFIX = 'doctor_availability#{}'
DOCTOR_DELAY_PREFIX = 'doctor_delay#{}'
CONTACT_US_PREFIX = 'contact_us#{}'
DOCTOR_STAFF_PREFIX = 'doctor_staff#{}'
DOCTOR_SLOT_AVAILABILITY_SLOT_UPDATE_PREFIX = 'doctor_slot_update#{}'
TOKEN_PREFIX = 'push_notification_token#{}'

TERMS_AND_CONDITION_TEXT_CONFIG_ID = 'terms_and_conditions'
DOCTOR_META_DATA = 'doctor_meta_data'
APP_CONFIG = 'app_config'
PATIENT_DOCTOR_VISIT = 'patient_doctor_visits#{}'
PATIENT_DOCTOR_VISIT_META = 'appointment#doctor#{}#date#{}#{}'

# dispensary + doctor
DISPENSARY_DOCTOR_AVAILABILITY_TIME_PERIOD = 'dispensary_doctor_availability#{}#{}'
# day
DISPENSARY_DOCTOR_AVAILABILITY_TIME_PERIOD_DAY = 'dispensary_doctor_availability#{}'


class DynamoDbClient:

    def __init__(self):
        '''create dynamodb client'''
        db = boto3.resource('dynamodb')
        TABLE_NAME = os.environ.get('TABLE_NAME')
        self.table = db.Table(TABLE_NAME)
        REALTIME_DATA_TABLE = os.environ.get('REALTIME_DATA_TABLE')
        self.real_time_data_table = db.Table(REALTIME_DATA_TABLE)

    def create_doctor(self, data):
        doctor = Doctor.json_load(data)
        doctor.PK = DOCTOR_PREFIX.format(doctor.mobile_number)
        doctor.SK = METADATA_PREFIX.format(DOCTOR_PREFIX.format(doctor.mobile_number))
        doctor.created_date = time_now()
        response = self.table.put_item(Item=doctor.__dict__)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return True
        else:
            return False

    def get_doctors(self):
        return self.table.scan()

    def get_doctor_by_id(self, id):
        response = self.table.query(
            KeyConditionExpression=Key('PK').eq(DOCTOR_PREFIX.format(id))
                                   & Key('SK').eq(METADATA_PREFIX.format(DOCTOR_PREFIX.format(id)))
        )
        return response['Items']

    def create_patient(self, data):
        patient = Patient.json_load(data)
        patient.PK = PATIENT_PREFIX.format(patient.mobile_number)
        patient.SK = METADATA_PREFIX.format(PATIENT_PREFIX.format(patient.mobile_number))
        # TODO remove hard code later
        if patient.profile_photo_url is None or patient.profile_photo_url == '':
            patient.profile_photo_url = ''

        if patient.display_name is None or patient.display_name == '':
            patient.display_name = patient.first_name + ' ' + patient.last_name

        response = self.table.put_item(Item=patient.__dict__)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return True
        else:
            return False

    def update_patient(self, data):
        patient = Patient.json_load(data)
        patient.PK = PATIENT_PREFIX.format(patient.mobile_number)
        patient.SK = METADATA_PREFIX.format(PATIENT_PREFIX.format(patient.mobile_number))
        # TODO remove hard code later
        if patient.profile_photo_url is None or patient.profile_photo_url == '':
            patient.profile_photo_url = ''

        if patient.display_name is None or patient.display_name == '':
            patient.display_name = patient.first_name + ' ' + patient.last_name

        response = self.table.update_item(
            Key={
                'PK': patient.PK,
                'SK': patient.SK
            },
            UpdateExpression=("set date_of_birth= :date_of_birth,"
                              " display_name= :display_name,"
                              " first_name= :first_name,"
                              " last_name= :last_name,"
                              " mobile_number= :mobile_number,"
                              " gender= :gender,"
                              " id= :id"),
            ExpressionAttributeValues={
                ":date_of_birth": patient.date_of_birth,
                ":first_name": patient.first_name,
                ":last_name": patient.last_name,
                ":mobile_number": patient.mobile_number,
                ":gender": patient.gender,
                ":display_name": patient.display_name,
                ":id": patient.id
            }
        )
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return True
        else:
            return False

    def get_patients(self):
        filtering_exp = Key('PK').begins_with(PATIENT_PREFIX)
        response = self.table.scan(FilterExpression=filtering_exp)
        return response['Items']

    def get_patient_by_id(self, id):
        response = self.table.query(
            KeyConditionExpression=Key('PK').eq(PATIENT_PREFIX.format(id))
                                   & Key('SK').eq(METADATA_PREFIX.format(PATIENT_PREFIX.format(id)))
        )
        return response['Items']

    def save_patient_doctor_visits(self, patient_id, doctor_id, date, note):
        visit_data = {
            "doctor_id": doctor_id,
            "date": date,
            "note": note,
            'PK': PATIENT_DOCTOR_VISIT.format(patient_id),
            'SK': PATIENT_DOCTOR_VISIT_META.format(doctor_id, date, str(uuid.uuid4()))
        }
        response = self.table.put_item(Item=visit_data)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return True
        else:
            return False

    def get_patient_doctor_visits(self, _id):
        response = self.table.query(
            KeyConditionExpression=Key('PK').eq(PATIENT_DOCTOR_VISIT.format(_id))
        )
        return response['Items']

    def create_dispensary(self, data):
        dispensary = Dispensary.json_load(data)
        dispensary.PK = DISPENSARY_PREFIX.format(dispensary.phone_number)
        dispensary.SK = METADATA_PREFIX.format(DISPENSARY_PREFIX.format(dispensary.phone_number))
        response = self.table.put_item(Item=dispensary.__dict__)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return True
        else:
            return False

    def check_existing_data(self, data):
        dispensary = Dispensary.json_load(data)
        dispensary.PK = DISPENSARY_PREFIX.format(dispensary.phone_number)
        response = self.table.query(
            KeyConditionExpression=Key('PK').eq(dispensary.PK)
        )
        if response is None:
            return False
        else:
            return True

    def add_doctor_to_dispensary(self, doctor_id, dispensary_id):
        data = {'PK': DOCTOR_PREFIX.format(doctor_id), 'SK': DISPENSARY_PREFIX.format(dispensary_id)}
        response = self.table.put_item(Item=data)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return True
        else:
            return False

    def add_stuff_to_dispensary(self, dispensary_id, staff_id, first_name, last_name, role=DispensaryStuffRoles.STAFF):
        data = {
            'PK': DISPENSARY_PREFIX.format(dispensary_id)
            , 'SK': DOCTOR_STAFF_PREFIX.format(staff_id)
            , 'dispensary_id': dispensary_id
            , "first_name": first_name
            , "last_name": last_name
            , "username": staff_id
            , 'role': role
        }
        response = self.table.put_item(Item=data)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return True
        else:
            return False

    def get_stuffs_by_dispensary(self, dispensary_id):
        response = self.table.query(
            KeyConditionExpression=Key('PK').eq(DISPENSARY_PREFIX.format(dispensary_id))
                                   & Key('SK').begins_with(DOCTOR_STAFF_PREFIX.format(''))
        )
        return response['Items']

    def save_staff_user_data(self, dispensary_id, staff_id, first_name, last_name):
        response = self.table.query(
            KeyConditionExpression=Key('PK').eq(DISPENSARY_PREFIX.format(dispensary_id))
                                   & Key('SK').eq(DOCTOR_STAFF_PREFIX.format(staff_id))
        )
        response = response['Items']
        if not response:
            return False
        data = response[0]

        new_data = {
            "first_name": first_name, "last_name": last_name
        }
        data.update(new_data)
        response = self.table.put_item(Item=data)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return True
        else:
            return False

    def get_dispensary_by_staff(self, stuff_id):
        sk = DOCTOR_STAFF_PREFIX.format(stuff_id)
        response = self.table.query(
            IndexName="gsi-index",
            KeyConditionExpression=Key('SK').eq(sk)
        )
        return response['Items']

    def get_doctor_and_dispensary(self, doctor_id, dispensary_id):
        response = self.table.query(
            KeyConditionExpression=Key('PK').eq(DOCTOR_PREFIX.format(doctor_id))
                                   & Key('SK').eq(DISPENSARY_PREFIX.format(dispensary_id))
        )
        return response['Items']

    def get_doctor_by_dispensary(self, dispensary_id):
        response = self.table.query(
            IndexName="gsi-index",
            KeyConditionExpression=Key('SK').eq(DISPENSARY_PREFIX.format(dispensary_id))
        )
        return response['Items']

    def get_dispensaries_by_doctor(self, doctor_id):
        response = self.table.query(
            KeyConditionExpression=Key('PK').eq(DOCTOR_PREFIX.format(doctor_id))
                                   & Key('SK').begins_with(DISPENSARY_PREFIX.format(''))
        )
        return response['Items']

    def add_slots_to_doctor_dispensary(self, data):
        ddb_data = json.loads(json.dumps(data), parse_float=Decimal)
        dispensary_doctor = DispensaryDoctor.json_load(ddb_data)

        dispensary_doctor.PK = DOCTOR_PREFIX.format(dispensary_doctor.doctor)
        dispensary_doctor.SK = DISPENSARY_PREFIX.format(dispensary_doctor.dispensary)
        response = self.table.put_item(Item=dispensary_doctor.__dict__)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return True
        else:
            return False

    def update_slot_duration(self, doctor_id, dispensary_id, slot_duration):
        doc_disp = self.get_doctor_and_dispensary(doctor_id, dispensary_id)
        if not doc_disp:
            return False, 'doctor not found | dispensary not found'
        doc_disp = doc_disp[0]
        doc_disp['slot_duration'] = slot_duration
        response = self.table.put_item(Item=doc_disp)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return True, 'Saved'
        else:
            return False, 'Update failed'

    def update_validity_period(self, doctor_id, dispensary_id, validity_period):
        doc_disp = self.get_doctor_and_dispensary(doctor_id, dispensary_id)
        if not doc_disp:
            return False, 'doctor not found | dispensary not found'
        doc_disp = doc_disp[0]
        doc_disp['validity_period'] = validity_period
        response = self.table.put_item(Item=doc_disp)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return True, 'Saved'
        else:
            return False, 'Update failed'

    def doc_availability_slot_update(self, slot_update: DoctorSlotUpdate):
        slot_update.PK = DOCTOR_SLOT_AVAILABILITY_SLOT_UPDATE_PREFIX.format(slot_update.doctor_id)
        slot_update.SK = DOCTOR_SLOT_AVAILABILITY_SLOT_UPDATE_PREFIX \
            .format(slot_update.date + "#" + str(slot_update.update_type))
        response = self.real_time_data_table.put_item(Item=slot_update.__dict__)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return True
        else:
            return False

    def doc_availability_slot_status_disable(self, slot_update: DoctorSlotUpdate):
        pk = DOCTOR_SLOT_AVAILABILITY_SLOT_UPDATE_PREFIX.format(slot_update.doctor_id)
        sk = DOCTOR_SLOT_AVAILABILITY_SLOT_UPDATE_PREFIX \
            .format(slot_update.date + "#" + str(slot_update.update_type))
        response = self.real_time_data_table.delete_item(
            Key={
                'PK': pk,
                "SK": sk
            }
        )
        return response

    def doc_availability_slot_update_get(self, doctor_id):
        response = self.real_time_data_table.query(
            KeyConditionExpression=Key('PK').eq(DOCTOR_SLOT_AVAILABILITY_SLOT_UPDATE_PREFIX.format(doctor_id))
        )
        return response['Items']

    def get_dispensary(self):
        response = self.table.query(
            KeyConditionExpression=Key('SK').begins_with(METADATA_PREFIX.format(DISPENSARY_PREFIX.format('')))
        )
        return response['Items']

    def get_dispensary_by_id(self, id):
        response = self.table.query(
            KeyConditionExpression=Key('PK').eq(DISPENSARY_PREFIX.format(id)) & Key('SK').eq(
                METADATA_PREFIX.format(DISPENSARY_PREFIX).format(id))
        )
        return response['Items']

    def create_appointment(self, patient_pk, doctor_pk, data):
        appointment = Appointment.json_load(data)
        appointment.PK = PATIENT_PREFIX.format(patient_pk)
        appointment.SK = APPOINTMENT_PREFIX.format(doctor_pk, data['date'])
        appointment.correlation_id = DOCTOR_PREFIX.format(doctor_pk)

        appointment.booking_at = time_now()
        response = self.real_time_data_table.put_item(Item=appointment.__dict__)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return appointment
        else:
            return False

    def create_appointment_v2(self, patient_pk, doctor_pk, data):
        appointment = Appointment.json_load(data)
        appointment.PK = PATIENT_PREFIX.format(patient_pk)
        appointment.SK = APPOINTMENT_SAVE_PREFIX.format(doctor_pk, data['date'], data['slot_id'])
        appointment.correlation_id = DOCTOR_PREFIX.format(doctor_pk)

        appointment.booking_at = time_now()
        response = self.real_time_data_table.put_item(Item=appointment.__dict__)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return appointment
        else:
            return False

    def cancel_appointment(self, patient_id, doctor_id, date):
        pk = PATIENT_PREFIX.format(patient_id)
        sk = APPOINTMENT_PREFIX.format(doctor_id, date)

        response = self.real_time_data_table.query(
            KeyConditionExpression=Key('PK').eq(pk)
                                   & Key('SK').eq(sk)
        )
        if not response['Items']:
            return False
        # if not [x for x in response['Items'] if x.status not in [1]]:
        #     return False

        saved_appointment = response['Items'][0]
        saved_appointment['cancel'] = True
        saved_appointment['status'] = AppointmentStatus.AVAILABLE

        response = self.real_time_data_table.put_item(Item=saved_appointment)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return saved_appointment
        else:
            return False

    def cancel_appointment_v2(self, patient_id, doctor_id, date, slot_id):
        pk = PATIENT_PREFIX.format(patient_id)
        # check for old app version
        sk = APPOINTMENT_SAVE_PREFIX.format(doctor_id, date, slot_id)

        response = self.real_time_data_table.query(
            KeyConditionExpression=Key('PK').eq(pk)
                                   & Key('SK').eq(sk)
        )
        if not response['Items']:
            return False
        # if not [x for x in response['Items'] if x.status not in [1]]:
        #     return False

        saved_appointment = response['Items'][0]
        saved_appointment['cancel'] = True
        saved_appointment['status'] = AppointmentStatus.AVAILABLE

        response = self.real_time_data_table.put_item(Item=saved_appointment)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return saved_appointment
        else:
            return False

    def cancel_all_appointment_patient(self, patient_id, doctor_id, date):
        pk = PATIENT_PREFIX.format(patient_id)
        # check for old app version
        sk = APPOINTMENT_PREFIX.format(doctor_id, date)

        response = self.real_time_data_table.query(
            KeyConditionExpression=Key('PK').eq(pk)
                                   & Key('SK').begins_with(sk)
        )
        if not response['Items']:
            return False
        # if not [x for x in response['Items'] if x.status not in [1]]:
        #     return False

        for saved_appointment in response['Items']:
            saved_appointment['cancel'] = True
            saved_appointment['status'] = AppointmentStatus.AVAILABLE

            response = self.real_time_data_table.put_item(Item=saved_appointment)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return saved_appointment
        else:
            return False

    # TODO @Sumedha add slotId
    def delete_appointment(self, patient_id, doctor_id, date):
        pk = PATIENT_PREFIX.format(patient_id)
        sk = APPOINTMENT_PREFIX.format(doctor_id, date)
        response = self.real_time_data_table.delete_item(
            Key={
                'PK': pk,
                "SK": sk
            }
        )
        return response

    def get_appointments_by_patient_id(self, patient_id):
        response = self.real_time_data_table.query(
            KeyConditionExpression=Key('PK').eq(PATIENT_PREFIX.format(patient_id))
                                   & Key('SK').begins_with('appointment')
            , ScanIndexForward=False,
        )
        return response['Items']

    def appointment_checked_in(self, patient_id, doctor_id, data, request):
        symptom = get_value_by_key(request, 'symptom')
        response = self.get_appointment_by_patient_doctor_and_date(patient_id, doctor_id, data)
        if not response:
            print("appointment not found")
            return False
        appointment = response[0]
        appointment['checked_in'] = True
        appointment['checked_in_at'] = time_now()
        appointment['status'] = AppointmentStatus.CHECKED_IN
        appointment['symptom'] = symptom

        response = self.real_time_data_table.put_item(Item=appointment)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return appointment
        else:
            print("appointment save failed")
            return False

    def appointment_examine(self, patient_id, doctor_id, data):
        response = self.get_appointment_by_patient_doctor_and_date(patient_id, doctor_id, data)
        if not response:
            print("appointment not found")
            return False
        appointment = response[0]
        appointment['examine_at'] = time_now()
        appointment['status'] = AppointmentStatus.EXAMINE

        response = self.real_time_data_table.put_item(Item=appointment)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return appointment
        else:
            print("appointment save failed")
            return False

    def appointment_treated(self, patient_id, doctor_id, data, note, delay):
        response = self.get_appointment_by_patient_doctor_and_date(patient_id, doctor_id, data)
        if not response:
            print("appointment not found")
            return False
        appointment = response[0]
        appointment['treated_at'] = time_now()
        appointment['status'] = AppointmentStatus.PAY_NOW
        appointment['note'] = note
        appointment['delay'] = delay

        response = self.real_time_data_table.put_item(Item=appointment)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return appointment
        else:
            print("appointment save failed")
            return False

    def appointment_checked_out(self, patient_id, doctor_id, data, payment=None):
        response = self.get_appointment_by_patient_doctor_and_date(patient_id, doctor_id, data)
        if not response:
            print("appointment not found")
            return False
        appointment = response[0]
        appointment['checked_out'] = time_now()
        appointment['status'] = AppointmentStatus.CHECKED_OUT
        appointment['payment'] = payment

        response = self.real_time_data_table.put_item(Item=appointment)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return appointment
        else:
            print("appointment save failed")
            return False

    def appointment_status_update(self, appointment, status, **kwargs):
        if status == AppointmentStatus.CHECKED_OUT:
            appointment['checked_out'] = time_now()
            appointment['status'] = AppointmentStatus.CHECKED_OUT
            appointment['payment'] = kwargs['payment']
        if status == AppointmentStatus.PAY_NOW:
            appointment['treated_at'] = time_now()
            appointment['status'] = AppointmentStatus.PAY_NOW
            appointment['note'] = kwargs['note']
            appointment['delay'] = kwargs['delay']
        if status == AppointmentStatus.EXAMINE:
            appointment['examine_at'] = time_now()
            appointment['status'] = AppointmentStatus.EXAMINE
        if status == AppointmentStatus.CHECKED_IN:
            appointment['checked_in'] = True
            appointment['checked_in_at'] = time_now()
            appointment['status'] = AppointmentStatus.CHECKED_IN
            appointment['symptom'] = kwargs['symptom']

        response = self.real_time_data_table.put_item(Item=appointment)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return appointment
        else:
            print("appointment save failed")
            return False

    def appointment_details_update(self,appointment,request):

        appointment['symptom'] = request['symptom']
        appointment['vital_signs'] = request['vital_signs']

        response = self.real_time_data_table.update_item(
            Key={
                'PK': appointment['PK'] ,
                'SK': appointment['SK']
            },
            UpdateExpression=("set symptom= :symptom,"
                              "vital_signs= :vital_signs"
                              ),
            ExpressionAttributeValues={
                ":symptom":appointment['symptom'],
                ":vital_signs":appointment['vital_signs']
            }
        )
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return appointment
        else:
            return False



    def appointment_make_available(self, patient_id, doctor_id, data):
        response = self.get_appointment_by_patient_doctor_and_date(patient_id, doctor_id, data)
        if not response:
            print("appointment not found")
            return False
        appointment = response[0]
        appointment['status'] = AppointmentStatus.AVAILABLE

        response = self.real_time_data_table.put_item(Item=appointment)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return appointment
        else:
            print("appointment save failed")
            return False

    def appointment_update_patient_details(self, patient_id, doctor_id, date, request):
        response = self.get_appointment_by_patient_doctor_and_date(patient_id, doctor_id, date)
        if not response:
            print("appointment not found")
            return False
        appointment = response[0]
        appointment['symptom'] = get_value_by_key(request, 'symptom')
        appointment['doctor_recommendation'] = get_value_by_key(request, 'doctor_recommendation')

        response = self.real_time_data_table.put_item(Item=appointment)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return appointment
        else:
            print("appointment save failed")
            return False

    def save_user_session(self, query_str_map, data):
        session = Session.json_load(data)

        # TODO need to fix this for patient
        if ('patient_id' in query_str_map) and ('doctor_id' in query_str_map):
            patient_id = query_str_map['patient_id']
            doctor_id = query_str_map['doctor_id']

            session.PK = PATIENT_PREFIX.format(patient_id)
            session.SK = SESSION_PREFIX.format(DOCTOR_PREFIX.format(doctor_id))

        elif 'doctor_id' in query_str_map and 'dispensary_id' in query_str_map:
            doctor_id = query_str_map['doctor_id']
            dispensary_id = query_str_map['dispensary_id']
            session.PK = DOCTOR_PREFIX.format(doctor_id)
            session.SK = SESSION_PREFIX.format(DISPENSARY_PREFIX.format(dispensary_id))

        elif 'staff_id' in query_str_map and 'dispensary_id' in query_str_map:
            staff_id = query_str_map['staff_id']
            dispensary_id = query_str_map['dispensary_id']
            session.PK = DOCTOR_STAFF_PREFIX.format(staff_id)
            session.SK = SESSION_PREFIX.format(DISPENSARY_PREFIX.format(dispensary_id))

        else:
            print("Not found any matching parm")
            return False

        response = self.real_time_data_table.put_item(Item=session.__dict__)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return True
        else:
            return False

    def delete_user_session(self, session_id):
        # TODO delete by session id
        return True

    def get_by_gsi(self, index):
        response = self.real_time_data_table.query(
            IndexName="gsi-index",
            KeyConditionExpression=Key('SK').eq(index)
        )
        return response['Items']

    def get_doctor_session_by_id(self, doctor_id, dispensary_id=None):
        sk = SESSION_PREFIX.format(DOCTOR_PREFIX.format(doctor_id)) if dispensary_id == None else SESSION_PREFIX.format(
            DISPENSARY_PREFIX.format(dispensary_id))
        return self.get_by_gsi(sk)

    def pause_doctor_session(self, doctor_id, pause):
        response = self.get_doctor_session_by_id(doctor_id)
        if not response:
            print("doctor session not found")
            return True
        session = response[0]
        session['pause'] = pause
        response = self.real_time_data_table.put_item(Item=session)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return True
        else:
            print("doctor pause save failed", doctor_id)
            return False

    def get_appointment_by_patient_doctor_and_date(self, patient_id, doctor_id, date):
        pk = PATIENT_PREFIX.format(patient_id)
        sk = APPOINTMENT_PREFIX.format(doctor_id, date)
        response = self.real_time_data_table.query(
            KeyConditionExpression=Key('PK').eq(pk)
                                   & Key('SK').begins_with(sk)
        )
        return response['Items']

    def get_appointments_by_doctor_and_date(self, doctor_id, date):
        sk = APPOINTMENT_PREFIX.format(doctor_id, date)
        doctor_pk = DOCTOR_PREFIX.format(doctor_id)
        appointments = self.real_time_data_table.query(
            IndexName="correlation-id-index",
            KeyConditionExpression=Key('correlation_id').eq(doctor_pk) & Key('SK').begins_with(sk)
        )
        return [d for d in appointments['Items'] if not d['cancel']]

    def now_serving_no_by_doctor_and_date(self, doctor_id, date):
        sk = APPOINTMENT_PREFIX.format(doctor_id, date)
        doctor_pk = DOCTOR_PREFIX.format(doctor_id)
        response = self.real_time_data_table.query(
            IndexName="correlation-id-index",
            KeyConditionExpression=Key('correlation_id').eq(doctor_pk) & Key('SK').begins_with(sk),
            FilterExpression=Key('status').eq(AppointmentStatus.EXAMINE)
        )
        return response['Items']

    def get_slots(self, doctor_id, dispensary_id, day, date, check_today_availability_handler=None):
        saved_doctor_dispensary = self.get_doctor_and_dispensary(doctor_id, dispensary_id)
        if not saved_doctor_dispensary:
            return []

        appointments = self.get_appointments_by_doctor_and_date(doctor_id, date)
        print(">>> d appointment ::: ", appointments)

        slots = []
        # for dr in saved_doctor_dispensary:
        #     d_slots = get_value_by_key(dr, 'slots', [])
        #     for s in d_slots:
        #         if day == s['day']:
        #             slots = s['slots']
        #             break

        if check_today_availability_handler is None:
            available_today = False
            updated_slots_found = False
            updated_slots = []
        else:
            available_today, updated_slots_found, updated_slots = \
                check_today_availability_handler(doctor_id, date, day, saved_doctor_dispensary[0])


        if updated_slots_found:
            slots = updated_slots
        else:
            for dr in saved_doctor_dispensary:
                # availability = self.get_doctor_dispensary_availability_time_period(doctor_id,dispensary_id, day )
                # print("GEO SEARCH ", "availability", availability )
                # if availability:
                d_slots = get_value_by_key(dr, 'slots', [])
                for s in d_slots:
                    if day == s['day']:
                        slots = s['slots']
                        break

        if not slots:
            print("unable to found any slots for given day")
            return []

        prepared_slots = []
        available_slots = len(slots)
        print(">>> d slots ::: ", slots)
        # ist_time = pytz.timezone('Asia/Kolkata')
        # now = datetime.now(ist_time)
        # current_date = now.strftime('%Y-%m-%d')
        # start_datetime = current_date + " " + slots[0]['availability_group_start_time'] + ':00'
        # appointments = list(filter(lambda x: datetime.strptime(x['slot_time'], '%Y-%m-%d %H:%M:%S') >= datetime.strptime(start_datetime,'%Y-%m-%d %H:%M:%S'),appointments))
        appointments = list(filter(lambda x: x['ghost_session'] is False, appointments))
        print(">>> dd appointments ::: ", appointments)
        for slot in slots:
            slot_number = int(slot['slot_number'])
            status = AppointmentStatus.AVAILABLE
            for appointment in appointments:
                if not appointment['cancel'] and (str(slot_number) == str(appointment['slot_id'])):
                    status = int(get_value_by_key(appointment, 'status', AppointmentStatus.AVAILABLE))
                    available_slots = available_slots - 1
                    break

            if status != AppointmentStatus.AVAILABLE or available_today:
                prepared_slots.append(
                    {'slot_id': slot_number, 'slot_time': date + ' ' + slot['start_time'], 'status': status})

        return {'doctor_id': doctor_id, 'dispensary_id': dispensary_id, 'day': day, 'date': date,
                'slots': prepared_slots, 'available_slots': available_slots, 'availability': available_today}

    def get_slots_by_patient(self, doctor_id, dispensary_id, day, date, patient_id, check_today_availability_handler):
        saved_doctor_dispensary = self.get_doctor_and_dispensary(doctor_id, dispensary_id)
        if not saved_doctor_dispensary:
            return []

        appointments = self.get_appointments_by_doctor_and_date(doctor_id, date)

        slots = []
        # for dr in saved_doctor_dispensary:
        #     d_slots = get_value_by_key(dr, 'slots', [])
        #     for s in d_slots:
        #         if day == s['day']:
        #             slots = s['slots']
        #             break
        available_today, updated_slots_found, updated_slots = \
            check_today_availability_handler(doctor_id, date, day, saved_doctor_dispensary[0])
        if updated_slots_found:
            slots = updated_slots
        else:
            for dr in saved_doctor_dispensary:
                d_slots = get_value_by_key(dr, 'slots', [])
                for s in d_slots:
                    if day == s['day']:
                        slots = s['slots']
                        break

        if not slots:
            print("unable to found any slots for given day")
            return []

        prepared_slots = []
        available_slots = len(slots)
        for slot in slots:
            slot_number = int(slot['slot_number'])
            status = AppointmentStatus.AVAILABLE
            book_by_me = False
            for appointment in appointments:
                if not appointment['cancel'] and (str(slot_number) == str(appointment['slot_id'])):
                    status = int(get_value_by_key(appointment, 'status', AppointmentStatus.AVAILABLE))
                    available_slots = available_slots - 1

                    booked_patient = str(appointment['PK']).replace("patient#", "")
                    if booked_patient == patient_id:
                        book_by_me = True

                    break

            if status != AppointmentStatus.AVAILABLE or available_today:
                prepared_slots.append(
                    {'slot_id': slot_number, 'slot_time': date + ' ' + slot['start_time'], 'status': status,
                     'book_by_me': book_by_me})

        return {'day': day, 'date': date, 'slots': prepared_slots, 'available_slots': available_slots}

    def get_slots_with_appointments(self, doctor_id, dispensary_id, day, date
                                    , update_slot_status_handler
                                    , check_today_availability_handler):
        saved_doctor_dispensary = self.get_doctor_and_dispensary(doctor_id, dispensary_id)
        if not saved_doctor_dispensary:
            return []

        appointments = self.get_appointments_by_doctor_and_date(doctor_id, date)

        slots = []
        # for dr in saved_doctor_dispensary:
        #     d_slots = get_value_by_key(dr, 'slots', [])
        #     for s in d_slots:
        #         if day == s['day']:
        #             slots = s['slots']
        #             break
        available_today, updated_slots_found, updated_slots = \
            check_today_availability_handler(doctor_id, date, day, saved_doctor_dispensary[0])
        if updated_slots_found:
            slots = updated_slots
        else:
            for dr in saved_doctor_dispensary:
                d_slots = get_value_by_key(dr, 'slots', [])
                for s in d_slots:
                    if day == s['day']:
                        slots = s['slots']
                        break
        if not slots:
            print("unable to found any slots for given day")
            return []

        prepared_slots = []
        available_slots = len(slots)
        ap_status = AppointmentStatus.AVAILABLE
        for slot in slots:
            slot_number = int(slot['slot_number'])
            status = True
            slot_appointment = None
            for appointment in appointments:
                if not appointment['cancel'] and (str(slot_number) == str(appointment['slot_id'])):
                    status = False
                    available_slots = available_slots - 1
                    slot_appointment = appointment
                    ap_status = get_value_by_key(slot_appointment, 'status')
                    break

            p_slot = {
                'slot_id': slot_number
                , 'slot_time': date + ' ' + slot['start_time']
                , 'appointment': slot_appointment
                , 'available': status
            }

            # status = update_slot_status_handler(doctor_id, p_slot, date, day, slot, saved_doctor_dispensary[0])
            if ap_status != AppointmentStatus.AVAILABLE or available_today:
                appointment = get_value_by_key(p_slot, 'appointment')
                if appointment is not None:
                    appointment_status = get_value_by_key(appointment, 'status', AppointmentStatus.AVAILABLE)
                    updated_status = get_value_by_key(p_slot, 'status', appointment_status)
                    p_slot['appointment']['status'] = updated_status
                prepared_slots.append(p_slot)

        return prepared_slots

    def add_preferred_doctor(self, patient_id, doctor_id, data):
        preferred_doc = PreferredDoctor.json_load(data)
        preferred_doc.PK = PATIENT_PREFIX.format(patient_id)
        preferred_doc.SK = PREFERRED_DOC_PREFIX.format(doctor_id)
        response = self.table.put_item(Item=preferred_doc.__dict__)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return True
        else:
            return False

    def get_preferred_doctor(self, patient_id):
        response = self.table.query(
            KeyConditionExpression=Key('PK').eq(PATIENT_PREFIX.format(patient_id))
                                   & Key('SK').begins_with(PREFERRED_DOC_PREFIX.format(''))
        )
        return response['Items']

    def delete_preferred_doctor(self, patient_id, doctor_id):
        response = self.table.delete_item(
            Key={
                'PK': PATIENT_PREFIX.format(patient_id),
                "SK": PREFERRED_DOC_PREFIX.format(doctor_id)
            }
        )
        return response

    def add_patient_family_member(self, patient_id, data):
        family_member = PatientFamilyMember.json_load(data)
        family_member.PK = PATIENT_PREFIX.format(patient_id)
        family_member.SK = PATIENT_FAMILY_MEMBER_PREFIX.format(data['first_name'])
        response = self.table.put_item(Item=family_member.__dict__)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return True
        else:
            return False

    def get_patient_family_members(self, patient_id):
        response = self.table.query(
            KeyConditionExpression=Key('PK').eq(PATIENT_PREFIX.format(patient_id))
                                   & Key('SK').begins_with(PATIENT_FAMILY_MEMBER_PREFIX.format(''))
        )
        return response['Items']

    def get_patient_family_member(self, patient_id, family_member_name):
        response = self.table.query(
            KeyConditionExpression=Key('PK').eq(PATIENT_PREFIX.format(patient_id))
                                   & Key('SK').eq(PATIENT_FAMILY_MEMBER_PREFIX.format(family_member_name))
        )
        return response['Items']

    def add_banner(self, data):
        banner = Banner.json_load(data)
        banner.PK = BANNER_PREFIX.format(banner.title)
        banner.SK = METADATA_PREFIX.format(banner.title)
        response = self.table.put_item(Item=banner.__dict__)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return True
        else:
            return False

    def get_banners(self):
        filtering_exp = Key('PK').begins_with(BANNER_PREFIX.format(""))
        response = self.table.scan(FilterExpression=filtering_exp)
        return response['Items']

    def doctor_review_add(self, doctor_id, data):
        review = Review.json_load(data)
        review.PK = DOCTOR_PREFIX.format(doctor_id)
        review.SK = REVIEW_PREFIX.format(doctor_id)
        response = self.table.put_item(Item=review.__dict__)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return True
        else:
            return False

    def doctor_rate_add(self, doctor_id, data):
        rate = Rate.json_load(data)
        rate.PK = DOCTOR_PREFIX.format(doctor_id)
        rate.SK = RATE_PREFIX.format(doctor_id)
        response = self.table.put_item(Item=rate.__dict__)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return True
        else:
            return False

    def doctor_reviews_get(self, doctor_id):
        response = self.table.query(
            KeyConditionExpression=Key('PK').eq(DOCTOR_PREFIX.format(doctor_id))
                                   & Key('SK').eq(REVIEW_PREFIX.format(doctor_id))
        )
        return response['Items']

    def doctor_rates_get(self, doctor_id):
        response = self.table.query(
            KeyConditionExpression=Key('PK').eq(DOCTOR_PREFIX.format(doctor_id))
                                   & Key('SK').eq(RATE_PREFIX.format(doctor_id))
        )
        return response['Items']

    def terms_and_condition_save(self, data):
        config = TextConfig.json_load(data)
        config.PK = TEXT_CONFIG_PREFIX.format(TERMS_AND_CONDITION_TEXT_CONFIG_ID)
        config.SK = METADATA_PREFIX.format(TERMS_AND_CONDITION_TEXT_CONFIG_ID)
        response = self.table.put_item(Item=config.__dict__)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return True
        else:
            return False

    def terms_and_condition_get(self):
        response = self.table.query(
            KeyConditionExpression=Key('PK').eq(TEXT_CONFIG_PREFIX.format(TERMS_AND_CONDITION_TEXT_CONFIG_ID))
        )
        return response['Items']

    def export_table(self, src_table, target_table):
        db = boto3.resource('dynamodb')
        src_table = db.Table(src_table)
        target_table = db.Table(target_table)

        src_response = src_table.scan()
        src_data_items = src_response['Items']
        for src_data_item in src_data_items:
            target_table.put_item(Item=src_data_item)

        target_response = target_table.scan()
        target_data_items = target_response['Items']

    def save_otp(self, phone_number, otp):
        otp_obj = OTP(phone_number, otp)
        otp_obj.PK = OTP_PREFIX.format(otp_obj.phone_number)
        otp_obj.SK = METADATA_PREFIX.format(otp_obj.phone_number)
        response = self.table.put_item(Item=otp_obj.__dict__)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return True
        else:
            return False

    def get_otp_by_phone_number(self, phone_number):
        response = self.table.query(
            KeyConditionExpression=Key('PK').eq(OTP_PREFIX.format(phone_number))
        )
        return response['Items']

    def save_doctor_availability(self, doctor_id, availabilities):
        doc_availability = DoctorAvailability(availabilities=availabilities)
        doc_availability.PK = DOCTOR_AVAILABILITY_PREFIX.format(doctor_id)
        doc_availability.SK = METADATA_PREFIX.format(doctor_id)
        response = self.table.put_item(Item=doc_availability.__dict__)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return True
        else:
            return False

    def get_availability_by_doctor(self, doctor_id):
        response = self.table.query(
            KeyConditionExpression=Key('PK').eq(DOCTOR_AVAILABILITY_PREFIX.format(doctor_id))
        )
        return response['Items']

    def save_doctor_delay(self, doctor_id, date, request):
        request_obj = DoctorDelay.json_load(request)
        request_obj.PK = DOCTOR_DELAY_PREFIX.format(doctor_id)
        request_obj.SK = METADATA_PREFIX.format(date)
        response = self.table.put_item(Item=request_obj.__dict__)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return True
        else:
            return False

    def get_doctor_delay_by_doctor_and_date(self, doctor_id, date):
        response = self.table.query(
            KeyConditionExpression=Key('PK').eq(DOCTOR_DELAY_PREFIX.format(doctor_id))
                                   & Key('SK').eq(METADATA_PREFIX.format(date))
        )
        return response['Items']

    def scan_table(self):
        return self.table.scan()['Items']

    def contact_us(self, request):
        request_obj = ContactUs.json_load(request)
        request_obj.PK = CONTACT_US_PREFIX.format(request_obj.email)
        request_obj.SK = CONTACT_US_PREFIX.format(request_obj.email)
        response = self.table.put_item(Item=request_obj.__dict__)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return True
        else:
            return False

    def doc_meta_data_save(self, key, data):
        saved_meta_data = self.doc_meta_data_get()
        if not saved_meta_data:
            entity = {
                'PK': DOCTOR_META_DATA,
                'SK': DOCTOR_META_DATA,
                key: data,
            }
        else:
            entity = saved_meta_data[0]
            entity[key] = data

        response = self.table.put_item(Item=entity)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return True
        else:
            return False

    def doc_meta_data_get(self):
        response = self.table.query(
            KeyConditionExpression=Key('PK').eq(DOCTOR_META_DATA)
        )
        return response['Items']

    def app_config_save(self, specialities, booking_fee, titles):
        data = {
            'PK': APP_CONFIG,
            'SK': APP_CONFIG,
            'specialities': specialities,
            'booking_fee': booking_fee,
            'titles': titles
        }
        response = self.table.put_item(Item=data)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return True
        else:
            return False

    def app_config_get(self):
        response = self.table.query(
            KeyConditionExpression=Key('PK').eq(APP_CONFIG)
        )
        return response['Items']

    def app_config_save(self, request):
        pk = 'app_config'
        data = {
            'PK': pk,
            'SK': pk,
            'specialities': request['specialities'],
            'symptoms': request['symptoms'],
            'titles': request['titles'],
            'payment_methods': request['payment_methods'],
            'booking_fee': request['booking_fee'],
        }

        response = self.table.put_item(Item=data)
        return response['Items']

    def save_doctor_dispensary_availability_time_period(self, doctor_id, dispensary_id, day, start_date, end_date):
        pk = DISPENSARY_DOCTOR_AVAILABILITY_TIME_PERIOD.format(doctor_id, dispensary_id)
        sk = DISPENSARY_DOCTOR_AVAILABILITY_TIME_PERIOD_DAY.format(day)
        data = {
            'PK': pk,
            'SK': sk,
            'doctor_id': doctor_id,
            'dispensary_id': dispensary_id,
            'day': day,
            'start_date': start_date,
            # int((strptime(start_date, '%Y-%m-%d') - datetime(1970, 1, 1)).total_seconds() * 1000),
            'end_date': end_date,
            # int((strptime(end_date, '%Y-%m-%d') - datetime(1970, 1, 1)).total_seconds() * 1000),
        }
        response = self.table.put_item(Item=data)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return True
        else:
            return False

    def get_doctor_dispensary_availability_time_period(self, doctor_id, dispensary_id, day):
        pk = DISPENSARY_DOCTOR_AVAILABILITY_TIME_PERIOD.format(doctor_id, dispensary_id)
        sk = DISPENSARY_DOCTOR_AVAILABILITY_TIME_PERIOD_DAY.format(day)
        # now = int((datetime.utcnow() - datetime(1970, 1, 1)).total_seconds() * 1000)
        response = self.table.query(
            KeyConditionExpression=Key('PK').eq(pk) & Key('SK').eq(sk)
            # FilterExpression=Attr('end_date').gt(now)
        )
        return response['Items']

    def get_appointment_by_patient(self, doctor_id, patient_id, date) -> Appointment:
        pk = PATIENT_PREFIX.format(patient_id)
        sk = APPOINTMENT_PREFIX.format(doctor_id, date)
        response = self.real_time_data_table.query(
            KeyConditionExpression=Key('PK').eq(pk) & Key('SK').begins_with(sk)
        )
        return response['Items']

    def get_appointment_by_patient_date_slot(self, doctor_id, patient_id, date, slot_id) -> Appointment:
        pk = PATIENT_PREFIX.format(patient_id)
        sk = APPOINTMENT_SAVE_PREFIX.format(doctor_id, date, slot_id)
        response = self.real_time_data_table.query(
            KeyConditionExpression=Key('PK').eq(pk) & Key('SK').eq(sk)
        )
        return response['Items']

    def doctor_payment_method_update(self, doctor_id, payment_method):
        doc = self.get_doctor_by_id(doctor_id)
        if not doc:
            return False, 'doctor not found'
        doc = doc[0]
        doc['payment_method'] = payment_method
        response = self.table.put_item(Item=doc)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return True, 'Saved'
        else:
            return False, 'Update failed'

    def update_notification_token(self, payload):
        data = {
            'PK': payload['token'],
            'SK': TOKEN_PREFIX.format(payload['user_id']),
            'platform': payload['platform'],
            "signed_in": payload['signed_in']
        }
        response = self.table.put_item(Item=data)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            return True, response
        else:
            return False, {}

    def get_notification_tokens(self, user_id):
        pk = TOKEN_PREFIX.format(user_id)
        response = self.table.query(
            IndexName="gsi-index",
            KeyConditionExpression=Key('SK').eq(pk)
        )
        return response['Items']
