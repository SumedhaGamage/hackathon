import os

import boto3
import dynamodbgeo
from boto3.dynamodb.conditions import Key, Attr

from lib.common_utils import get_value_by_key, get_value_for_empty

first_name_search_field = "first_name_search"
last_name_search_field = "last_name_search"
speciality_search_field = "speciality_search"
city_search_field = "city_search"

parse_template = {
    'mobile_number': 'S',
    'initials': 'S',
    'display_name': 'S',
    'first_name': 'S',
    'last_name': 'S',
    'review': 'N',
    'rating': 'N',
    'preferred_doctor': 'BOOL',
    'active': 'BOOL',
    'consultation_fee': 'N',
    'image_url': 'S',
    'slmc_registratoin_number': 'S',
    'speciality': 'S',
    'verified': 'BOOL',
    'educations': 'S',
    'city': 'S',
    'availability': 'BOOL',
    'dispensary': {
        'name': 'S',
        'address': 'S',
        'phone_number': 'S',
    }
}


class GeoHashClient:
    def __init__(self):
        self.dynamodb = boto3.client('dynamodb')
        db = boto3.resource('dynamodb')
        self.table_name = os.environ.get('GEO_HASH_TABLE_NAME')
        self.table = db.Table(self.table_name)
        config = dynamodbgeo.GeoDataManagerConfiguration(self.dynamodb, self.table_name)
        config.hashKeyLength = 6
        self.geo_data_manager = dynamodbgeo.GeoDataManager(config)

    def save(self, doctor, dispensary):
        saved_record = self.get_by_id(doctor, dispensary)
        if not saved_record:
            _id = self.add(doctor, dispensary)
            print("add new record", _id)
        else:
            _id = self.update(doctor, dispensary)
            print("updated record", _id)

    def add(self, doctor, dispensary):
        _id = GeoHashClient.__create_id(doctor, dispensary)
        print("recived doctor: {}".format(doctor))
        print("doctor image url: {}".format(get_value_by_key(doctor, 'image_url', '')))

        lat = dispensary['geo_location']['lat']
        lon = dispensary['geo_location']['lon']
        dispensary.pop('geo_location')

        put_item_input = {
            'Item': {
                'mobile_number': {'S': get_value_by_key(doctor, 'mobile_number', '')},
                'initials': {'S': get_value_by_key(doctor, 'initials', '')},
                'display_name': {'S': get_value_by_key(doctor, 'display_name', '')},
                'first_name': {'S': get_value_by_key(doctor, 'first_name', '')},
                'last_name': {'S': get_value_by_key(doctor, 'last_name', '')},
                'review': {'N': str(get_value_by_key(doctor, 'review', '0'))},
                'rating': {'N': str(get_value_by_key(doctor, 'rating', '0'))},
                'preferred_doctor': {'BOOL': get_value_by_key(doctor, 'preferred_doctor', '')},
                'active': {'BOOL': get_value_by_key(doctor, 'active', False)},
                'consultation_fee': {'N': str(get_value_by_key(doctor, 'consultation_fee', ''))},
                'image_url': {'S': get_value_by_key(doctor, 'image_url', '')},
                'slmc_registratoin_number': {'S': get_value_by_key(doctor, 'slmc_registratoin_number', '')},
                'speciality': {'S': get_value_by_key(doctor, 'speciality', '')},
                'verified': {'BOOL': get_value_for_empty(get_value_by_key(doctor, 'verified', ''), False)},
                'educations': {'S': get_value_for_empty(get_value_by_key(doctor, 'educations', ''), '')},
                'city': {'S': get_value_by_key(dispensary, 'city', '')},
                'availability': {'BOOL': get_value_by_key(doctor, 'availability', True)},
                'dispensary': {'M':
                    {
                        'name': {'S': get_value_by_key(dispensary, 'name', '')},
                        'address': {'S': get_value_by_key(dispensary, 'address', '')},
                        'phone_number': {'S': get_value_by_key(dispensary, 'phone_number', '')},
                    }
                },
                first_name_search_field: {'S': str(get_value_by_key(doctor, 'first_name', '')).lower()},
                last_name_search_field: {'S': str(get_value_by_key(doctor, 'last_name', '')).lower()},
                speciality_search_field: {'S': str(get_value_by_key(doctor, 'speciality', '')).lower()},
                city_search_field: {'S': str(get_value_by_key(dispensary, 'address', '')).lower()},
            },
            'ConditionExpression': "attribute_not_exists(hashKey)"
        }
        self.geo_data_manager.put_Point(dynamodbgeo.PutPointInput(
            dynamodbgeo.GeoPoint(lat, lon),
            _id,
            put_item_input
        ))
        return _id

    def update(self, doctor, dispensary):
        self.delete_by_id(doctor, dispensary)
        return self.add(doctor, dispensary)

    def get_by_id(self, doctor, dispensary):
        _id = GeoHashClient.__create_id(doctor, dispensary)
        response = self.table.query(
            IndexName="rangeKey-index",
            KeyConditionExpression=Key('rangeKey').eq(_id)
        )
        return response['Items']

    def delete_by_id(self, doctor, dispensary):
        _id = GeoHashClient.__create_id(doctor, dispensary)
        saved_record = self.get_by_id(doctor, dispensary)
        if not saved_record:
            return False

        saved_record = saved_record[0]

        self.table.delete_item(
            Key={
                'hashKey': saved_record['hashKey'],
                "rangeKey": saved_record['rangeKey']
            }
        )
        return True

    def doctor_search_by_name_prefix_and_geo_distance(self, name_prefix, geo_point, distance, specialty, city):
        try:
            # convert km to m
            query_radius_input = {
                "FilterExpression": "(contains({}, :name_prefix)"
                                    " or contains({}, :name_prefix)"
                                    " or contains(first_name, :name_prefix)"
                                    " or contains(last_name, :name_prefix))"
                                    " and (contains({}, :speciality) or contains(speciality, :speciality))"
                                    " and (contains({}, :city) or contains(city, :city))"
                                    " and verified = :verified"
                    .format(first_name_search_field, last_name_search_field, speciality_search_field,
                            city_search_field),
                "ExpressionAttributeValues": {
                    ":name_prefix": {"S": name_prefix},
                    ":speciality": {"S": specialty},
                    ":city": {"S": city},
                    ":verified": {"BOOL": True}
                }
            }

            # convert km to m
            if name_prefix or specialty or city:
                return True, self.table.scan(
                    FilterExpression=
                    (Attr("city").contains(city))
                    .__and__(Attr('speciality').contains(specialty))
                    .__and__(Attr("verified").eq(True))
                    .__and__(Attr("first_name").contains(name_prefix).__or__(Attr("last_name").contains(name_prefix)))
                )['Items']
            else:
                distance = distance * 1000

            if geo_point['lat'] == 0:
                # TODO need to change
                # 9.9178296,78.0527821
                min_geo_point = {
                    "lat": 6.990885,
                    "lon": 80.178636
                }
                # 6.0494609,81.9314283
                max_geo_point = {
                    "lat": 6.919999,
                    "lon": 80.251421
                }
                distance = 200000  # m

                min_lat = float(min_geo_point['lat'])
                min_lon = float(min_geo_point['lon'])

                max_lat = float(max_geo_point['lat'])
                max_lon = float(max_geo_point['lon'])

                return True, self.geo_data_manager.queryRectangle(
                    dynamodbgeo.QueryRectangleRequest(
                        dynamodbgeo.GeoPoint(min_lat, min_lon),
                        dynamodbgeo.GeoPoint(max_lat, max_lon),
                        query_radius_input))

            # TODO change this to geo_point
            lat = float(geo_point['lat'])
            lon = float(geo_point['lon'])
            print('starting search', geo_point)
            # lat = float(6.954712296380159)
            # lon = float(80.20517761481935)
            return True, self.geo_data_manager.queryRadius(
                dynamodbgeo.QueryRadiusRequest(
                    dynamodbgeo.GeoPoint(lat, lon),
                    distance, query_radius_input, sort=True))

        except Exception as e:
            print("geohash search failed", e)
            return False, []

    @staticmethod
    def __create_id(doctor, dispensary):
        return doctor['mobile_number'] + '-' + dispensary['phone_number']

    @staticmethod
    def parse_response(result, template):
        output = {}
        for key in template:
            if key == 'dispensary':
                data_dic = get_value_by_key(result, key)
                data_dic = get_value_by_key(data_dic, 'M')
                if not data_dic:
                    continue
                output[key] = GeoHashClient.parse_response(data_dic, template[key])
            else:
                data_dic = get_value_by_key(result, key)
                if not data_dic:
                    continue

                data_type_key = template[key]
                data = data_dic[data_type_key]

                if data_type_key == 'N':
                    data = GeoHashClient.convert_numeric(data)

                output[key] = data

        return output

    @staticmethod
    def convert_numeric(data):
        try:
            return float(data)
        except Exception:
            return data
