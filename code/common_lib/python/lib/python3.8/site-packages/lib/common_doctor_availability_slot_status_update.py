from lib.common_consts import AppointmentStatus
from lib.common_utils import get_value_by_key, is_empty_str, parse_date
from lib.doctor_availability_consts import SlotUpdateType
from lib.dynamo_client import DynamoDbClient
import json
import datetime

from lib.entity import DoctorSlotUpdate
from lib.http_utils import send_error, HttpStatus, send_common_success, send_common_server_error

db_client = DynamoDbClient()

headers= {
            'Access-Control-Allow-Headers': "Content-Type",
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
        }


def get_day_of_date(date):
    date = parse_date(date)
    return date.weekday()


def update_appointments_status(doctor_id, date):
    try:
        appointments = db_client.get_appointments_by_doctor_and_date(doctor_id, date)
        # for appointment in appointments:
        #     ap_status = get_value_by_key(appointment, 'status')
        #     if ap_status == AppointmentStatus.CHECKED_IN or ap_status == AppointmentStatus.NOT_AVAILABLE:
        #         patient_id = str(appointment['PK']).replace("patient#", "")
        #         db_client.appointment_make_available(patient_id, doctor_id, date)
        for appointment in appointments:
            ap_status = get_value_by_key(appointment, 'status')
            if (ap_status == AppointmentStatus.AVAILABLE) \
                    or (ap_status == AppointmentStatus.NOT_AVAILABLE)\
                    or (ap_status == AppointmentStatus.CHECKED_IN):
                patient_id = str(appointment['PK']).replace("patient#", "")
                db_client.cancel_appointment(patient_id, doctor_id, date, appointment['slot_id'])
            else:
                # patient_id = str(appointment['PK']).replace("patient#", "")
                # db_client.appointment_make_available(patient_id, doctor_id, date)
                pass
    except Exception as e:
        print("update_appointments_status failed cause", e.__str__())


def doc_availability_slot_update(event, context):
    request = json.loads(event['body'])
    doctor_id = get_value_by_key(request, 'doctor_id', None)
    date = get_value_by_key(request, 'date', None)
    enable = get_value_by_key(request, 'enable', False)

    # cancel_mode = True ( Cancel all ) , cancel_mode = False ( Cancel for this week only )
    cancel_mode = get_value_by_key(request, 'cancel_mode', False)
    if doctor_id is None or date is None:
        return send_error(
            message='doctor_id or date empty',
            statusCode=HttpStatus.BAD_REQUEST
        )

    # if cancel_mode:
    #     # only need to Cancel all mode
    #     update_appointments_status(doctor_id, date)

    slot_update = DoctorSlotUpdate(
        doctor_id=doctor_id,
        update_type=SlotUpdateType.status_update_type,
        date=date,
        cancel_mode=cancel_mode,
    )
    if enable:
        status = db_client.doc_availability_slot_status_disable(slot_update)
    else:
        status = db_client.doc_availability_slot_update(slot_update)
        update_appointments_status(doctor_id, date)

    if status:
        return send_common_success()
    else:
        return send_common_server_error()

