from datetime import datetime
from pytz import timezone

colombo = timezone('Asia/Colombo')


def get_value_by_key(obj, key, default_value=None):
    if key in obj:
        if obj[key] is not None:
            return obj[key]
        else:
            return default_value
    else:
        return default_value


def is_empty_str(obj):
    return (obj is None) or (obj == '')


def get_value_for_empty(obj, default_value=None):
    if (obj is None) or (obj == ''):
        return default_value
    else:
        return obj


def parse_date(dt):
    try:
        if not dt:
            return None
        return datetime.strptime(dt, '%Y-%m-%d')
    except Exception as e:
        print("parse_date failed ", dt, ", cause ", e)
        return None


def parse_date_time(dt):
    try:
        if not dt:
            return None
        return datetime.strptime(dt, '%Y-%m-%d %H:%M:%S')
    except Exception as e:
        print("parse_date failed ", dt, ", cause ", e)
        return None


def parse_time(t):
    try:
        if not t:
            return None
        return datetime.strptime(t, '%H:%M')
    except Exception as e:
        print("parse_date failed ", t, ", cause ", e)
        return None

def parse_time_with_sec(t):
    try:
        if not t:
            return None
        return datetime.strptime(t, '%H:%M:%S')
    except Exception as e:
        print("parse_date failed ", t, ", cause ", e)
        return None


def sort_list(req_list, _key, desc=False):
    return sorted(req_list, key=_key, reverse=desc)


def remove_duplicates(req_list):
    return [dict(t) for t in {tuple(d.items()) for d in req_list}]


def pop_key(obj, key):
    if key in obj:
        obj.pop(key)
        return True
    else:
        return False


def time_now():
    return colombo.localize(datetime.now()).strftime("%Y-%m-%d %H:%M")